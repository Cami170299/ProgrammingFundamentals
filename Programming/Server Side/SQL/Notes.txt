										 SQL


Get or install a DataBase.

	Option 1. One of the easiest ways to get a database is to register for a shared hosting account. If you go to hostgator.com and enter the code 
	“onemonthcode,″ you’ll gain access to a MYSQL database for only $0.01 (for the first month). Once you’re in the 
	control panel (or cPanel) click the option to create a new database. Then, click on “PHPMyAdmin” for access to your  	MYSQL database.  to learn more. 

	Option 2.A alter. instead of hostgator.com is "Mamp", you run everything localy.

Get Data to play with (DataSet)
	
	After setting up My SQL, you can run a DataSet importing the information for free 
	(Related documentation: https://learn.onemonth.com/the-complete-guide-to-learn-sql-in-just-15-minutes-for-free/)
		-- Run some commands 		

Notes: 

	(Book: Sams Teach Yourself SQL in 10 min by Ben Forta).
	w3schools.com (Web page to learn).
	Try to brake the code of other people.



											WHAT IS SQL

SQL is a Structured Query Programming Language, (Basically is the language we use to manipulate data in a database.) 
SQL is a hybrid language so is basically 4 languages in 1

1. Data Query Language (DQL)
	Is used to Query the data base for information.
	Get information that is already stored.

2. Data Definition Language (DDL)
	Used fo defined database schemas. (Structure of the DB )

3. Data Control Language (DCL)
	Used for controlling accessing data in the database.
	User & permission managements.(Control the accessibility of the users for each DB or Data table.)

4. Data Manipulation Language (DML)
	Used C.R.U.D.       (CRUD stands for: Create, Read, Update & Delete.)

										WHAT IS A DATABASE

A data base is any type of related store information.

Structure

Data Base (DB) —> Tables —> Data, Id, Information, etc...

Types of DBs:

	1) Non-relational DB (noSQL / not just SQL)

	Is any type of DB that is not a relational DB.

		- Key-Value Stores
		- Documents (JSON, XML, etc)
		- Graphs

	2) Relational DB (SQL)

	Organize data into one or more tables:
	
		- Each table columns and rows 
		- A unique key identifies each row. 

In order to manipulate a Relational DB we need a (RDBMS)


										RELATIONAL DATA BASE MANAGEMENT SYSTEM (RDBMS)


A DBMS is a  (Relational Data Base Management system) as the same as MySQL there is multiple RDBMS such as:

	- SQLite
	- PostgreSQL
	- Oracle

The main functionalities of a RDBMS are:       (Note: Even though RDBMS use SQL the implementations vary from one to another.)

	- Make easier the management of large amount of data. CRUD
	- Handle Security
	- Create Backups 
	- Import and Export Data.
	- Concurrency.
	- Interact with software Languages 
		- Java 
		- Pyhon.
		- C# etc.. 

With this functionalities we can perform CRUD operations, as well as Queries.

												QUERY

A query is a set of instructions given to the RDBMS (Written in SQL) that tells the RDBMS what information we are asking for 
(Basically something like a program.) The queries are defines to work with IDs (PRIMARY KEYS) which gather specific information 
for our requests.

Example:

SELECT employee.name, employee.age
FROM Employee
WHERE employee.salary > 30000;

What is a Primary Key

Is a value that identifies a specific row in a table.

Types of primary keys:

	- Surrogated Keys (Which is a random number. Exp. 12N0983)
	- Natural Keys(This are unique identifiers in the real world as well Exp. e-mail \\ SIN number)
	- Foreign Keys (Is a key that takes us to another tables primary key)
	- Composed key (2 Identifiers, this could be Surrogated, Natural or even Foreign keys. )

											

									HOW TO INSTALL 

First we need a DB server, so we will install our RDBMS in this case (MySQL), 

Once installed you will have to activate the command line writing : 

echo 'export PATH=/usr/local/mysql/bin:$PATH'>> ~/.bash_profile
. ~/.bash_profile

This will activate ‘mysql’ commands.

The set your user with => 
				
				ALTER USER 'root'@'localhost' IDENTIFIED BY 'password';    							OR 
				GRANT ALL PRIVILEGES ON *.* TO 'db_user'@'localhost' IDENTIFIED BY 'P@s$w0rd123!';

										CREATING OUR FISRT DATABASE
Access your DB

mysql -u root -p         (<——— this is the command to access the database)   

Then to create a data base you put 

		 CREATE DATABASE DataBaseName;

To check if you created a data base use:
	
		 SHOW DATABASES

Then to modify your DB you need to write;

		USE database_name;

											CREATING A TABLE

Types of data we can store in tables

INT 						— Whole numbers 
DECIMAL(M,N)			— Store the length of national numbers in M and irrational in N exp. (2,5) = 12.45654
VARCHAR(1)				— The length of text 
BLOB					— Binary numbers (omg, videos, etc)
DATE					— format ‘yyyy-mm-dd’
TIMESTAMP				— format ‘yyyy-mm-dd hh:mm:ss’

The comparison formats are 

		= : Equals 
		<> : Not Equal To
		> : Greater than 
		< : Less than 
		<= or >=  		

The command for creating a table:

Most important SQL Commands 

/*C.R.U.D COMMANDS*/

UPDATE - Updates data in a database
DROP - Deletes data from a database
INSERT INTO - Inserts new data into a database
CREATE DATABASE - Creates a database 
ALTER DATABASE - Modifies a database 
CREATE TABLE -  Creates a new table
ALTER TABLE - Modifies a table 
DROP TABLE - Deletes a table 
CREATE INDEX - Creates an index (Search Key)
DROP INDEX - deletes an index 

/*QUERIES*/

SELECT - Extracts data from a database 
FORM - specify the table
WHERE - Gives Parameters
DISTINCT - unique values
COUNT - the length of the data
LIKE - Starts ends with a specific combination.
IN() - allows you to look for multiple parameters



/*Different data types
INT  -- Exp. 1234567 
DECIMAL(M,N) -- Exp. (2,4) = 12.4566
VARCHAR(1) -- String (4) = hola.
BLOB -- Binary large data = videos photos
DATE -- 'yyyy-mm-dd'
TIMESTAMP -- 'yyyy-mm-dd HH:MM:SS'
*/




                              				  /*CRUD COMMANDS*/



    --TABLES

/*Creating a table*/
CREATE TABLE example (
    id INT AUTO_INCREMENT, -- It will increase the automatically the value
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    phone_number INT NOT NULL UNIQUE, -- NOT NULL = no empty , UNIQUE = does not repeat itself.
    birthday DATE,
    description VARCHAR(20) DEFAULT 'No description', -- The default will automaticalli assign the value in the table. 
    PRIMARY KEY (id) -- Creating a primary key. 
);

/*Delete a Table*/
DROP TABLE students;


    -- COLUMNS

/*Updating a primary key*/
ALTER TABLE example ADD PRIMARY KEY(first_name);

/*Creating a column*/
ALTER TABLE example ADD country VARCHAR(30);

/*Updating the name of a column*/
ALTER TABLE example RENAME COLUMN id TO example_id;

/*Updating a column properties*/
ALTER TABLE example MODIFY COLUMN phone_number BIGINT;

/*Deleting a column */
ALTER TABLE example DROP COLUMN birthday;


    -- ROWS 


/*creating a new row*/
INSERT INTO example 
                (id,first_name,last_name,phone_number,description,country)
                VALUES (100,'Jack', 'Daniels', 51466576978,'Like Whisky','Canada');
INSERT INTO example
                (first_name,last_name,phone_number,country) 
                VALUES ('Michael', 'Scott', 5149874678,'Colombia'),
                ('Andy','Bernard',4388974532, 'United States'),operations
                ('Camilo', 'Sierra', 5127786756, 'Colombia'),
                ('Marlon', 'Texeira', 8379380044, 'Brasil'),
                ('Anna', 'Rüpp-Desrosiers', 4368764936, 'Canada'),
                ('Saulo', 'Barra', 9871237643, 'Canada');

/*Updating a row*/
UPDATE exmaples SET hpone_number = 1234560932 WHERE id = 100; 

/*Deleting values*/
DELETE FROM exmaples WHERE id = 2 AND fisrt_name = 'Michael';





							  /*QUERIES*/




/*Show all tables of the database*/
SHOW TABLES;

/*Display a table*/
DESCRIBE example;

/*selecting data*/
SELECT * FROM example;

/*Specified Queries*/
SELECT first_name, last_name FROM example;

/*Identify the type of values no matter if the repeat itself */
SELECT DISTINCT country FROM example;

/*This will tell the count of a value in this case different values. */
SELECT COUNT(DISTINCT country) FROM example;

/*Specification*/
SELECT * FROM example WHERE id = 100;

/*Selecting a-likes*/
SELECT first_name FROM example WHERE country LIKE 'C%'; -- can also 'Can%' or '&ada'

/*In selector*/
SELECT first_name, last_name FROM example WHERE country IN ('Colombia', 'Canada');

/* ordering and Limiting results*/
SELECT first_name, phone_number FROM example ORDER BY last_name ASC LIMIT 2; -- can also be ASC and DESC order

/*Operators*/
SELECT first_name FROM example
WHERE NOT country = 'E.E.U.U' AND NOT country LIKE 'Can%' /*You also have 'OR'*/









									/*CREATING A COMPLEX DB*/ = (Company_DataBase)


— employee table

CREATE TABLE employees(
    employee_id INT PRIMARY KEY,
    name VARCHAR (20),
    last_name VARCHAR(20),
    birth_day DATE,
    sex VARCHAR(1),
    salary BIGINT,
    supervisor_id INT,
    branch_id INT);

— branch table 

CREATE TABLE branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(20),
    branch_manager INT,
    manager_startdate DATE,
    FOREIGN KEY(branch_manager) REFERENCES employee(id) ON DELETE SET NULL);

ALTER TABLE employees ADD FOREIGN KEY(branch_id)REFERENCES branch(branch_id) ON DELETE SET NULL;
ALTER TABLE employees ADD FOREIGN KEY(supervisor_id) REFERENCES employees(emp_id) ON DELETE SET NULL;

-- Creating table client

CREATE TABLE client (
 	client_id INT PRIMARY KEY,
  	client_name VARCHAR(40),
  	branch_id INT,
  	FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  	employee_id INT,
  	client_id INT,
  	total_sales INT,
  	PRIMARY KEY(employee_id, client_id),
  	FOREIGN KEY(employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE,
  	FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  	branch_id INT,
  	supplier_name VARCHAR(40),
  	supply_type VARCHAR(40),
  	PRIMARY KEY(branch_id, supplier_name),
  	FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);


										/*INSERTING DATA AND UPDATING*/ 


-- employees table 

INSERT INTO employees VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employees SET branch_id = 1 WHERE employee_id = 100;

INSERT INTO employees VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);
INSERT INTO employees VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employees SET branch_id = 2 WHERE employee_id = 102;

INSERT INTO employees VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employees VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employees VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);
INSERT INTO employees VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employees SET branch_id = 3 WHERE employee_id = 106;

INSERT INTO employees VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employees VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- branch supplier table 

INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Labels', 'Custom Forms');


-- Client table 

INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- works_with table 

INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);


										/*QUERIES*/ = (Company_Database)

-- find all employees
	SELECT * FROM employees;

-- find all clients
	SELECT * FROM client;

-- find all the employees ordered by salary
	SELECT first_name,salary FROM employees ORDER BY salary DESC;

-- Select all employees ordered by sex then name
	SELECT first_name, sex FROM employees ORDER BY sex, first_name;

-- Select the first 5 employees of thge table.
	SELECT * FROM employees LIMIT 5;

-- select firts and last name from employees
	SELECT employees.first_name, employees.last_name FROM employees;

-- find the forename and surname fo all employees 
	SELECT first_name AS forename , employees.last_name AS surname FROM employees;

-- find all the different sexes
	SELECT COUNT(DISTINCT sex) FROM employees;

-- Select all male employees
	SELECT * FROM employees WHERE sex = 'M' AND salary >= 75000 ORDER BY salary DESC;

-- Select all employees from branch 2
	SELECT * FROM employees WHERE branch_id = 2;

-- Find all employee's id's and names who were born after 1969
	SELECT employees.first_name, birth_day AS Year FROM employees WHERE birth_day >= '1969-01-01';	

-- finding all females employees from a specific branch
	SELECT * FROM employees WHERE branch_id = 2 AND sex = 'F';

-- Find all employees who are female & born after 1969 or who make over 80000
	SELECT * FROM employees WHERE sex = 'F' AND birth_day = '1970-01-01' OR salary > 80000;

-- Find all employees born between 1970 and 1975
	SELECT * FROM employees WHERE birth_day BETWEEN '1970-01-01' AND '1975-01-01';

-- Find all employees named Jim, Michael, Johnny or David
	SELECT * FROM employees WHERE first_name IN ('Jim', 'Michael', 'Johnny', 'David');

									/*fUNTION QUERIES*/

-- Find how many employees are
	SELECT COUNT(*) AS Amount FROM employees;

-- Find the average of all employees salary
	SELECT AVG(salary) FROM employees WHERE salary BETWEEN 70000 AND 150000;

-- Find the sum of all salaries
	SELECT SUM(salary) FROM employees;

-- Fing how many females and male are 
	SELECT COUNT(sex),sex FROM employees GROUP BY sex; 

-- Find the total sales of each sales man
	SELECT SUM(total_sales) AS sales, employee_id FROM works_with GROUP BY employee_id ORDER BY sales DESC;

-- Find the total amount of money spended by each client
	SELECT SUM(total_sales), client_id FROM works_with GROUP BY client_id ORDER BY SUM(total_sales) DESC;

										/*WILD CARDS*/

-- Find a client taht is a LLC
SELECT * FROM client WHERE client_name LIKE '%LLC%';

-- Find any client's who are an LLC
SELECT * FROM client WHERE client_name LIKE '%LLC';

-- Find any branch suppliers who are in the label business
SELECT * FROM branch_supplier WHERE supplier_name LIKE '% Label%';

-- Find any employee born on the 10th day of the month
SELECT * FROM employees WHERE birth_day LIKE '____-10-%';

										/*UNIONS*/

-- Find a list of employee and branch names
SELECT employees.first_name AS Employee_Branch_Names FROM employees
UNION
SELECT branch.branch_name FROM branch;

-- Find a list of all clients & branch suppliers' names
SELECT client.client_name AS Non_Employee_Entities, client.branch_id AS Branch_ID FROM client
UNION
SELECT branch_supplier.supplier_name, branch_supplier.branch_id FROM branch_supplier;

										/*JOINS*/

