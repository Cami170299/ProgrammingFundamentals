body{
    min-height: 5000px
}


/*CSS FUNDAMENTALS*/

.outline{
    margin: 10px;
    padding: 5px;
    border: 1px solid black;
    outline: 5px solid red;
    outline-offset: 10px;
}
p.uppercase {
    text-transform: uppercase;
  }
  
  p.lowercase {
    text-transform: lowercase;
  }
  
  p.capitalize {
    text-transform: capitalize;
  }
.text-aligment-pro {
    text-align: justify; /*this will justify the text to the width of the conainer*/
    text-align-last: justify; /*this will strech all the text to fit perfectly the full width of the container*/
}
.spacing-tab-indent{
    text-indent: 50px;
}
.shadow-text {
    color: rgb(192, 192, 192);
    text-shadow: 5px 5px 6px rgb(63, 63, 63);
}
.shadow-text2 {
    color: rgb(0, 0, 0);
    text-shadow: 0px 0px 5px rgb(255, 0, 0);
}






/*RWD RESPONSIVE WEB DESIG*/

.responsive-text{
    font-size: 2vw;
}

/*FLEX*/

.flex-container{
    background-color: darkorange;
    display: flex;
    /*flex-direction: column;  invert the main and cross x's */
    /*flex-wrap: wrap; this is used to wrap the container elements */

    /*justify-content: center; You use it to diplay content horizontally*/
    /*justify-content: space-between;
    justify-content: space-around;*/

    /*align-items: flex-start; You use it to diplay content vertically*/
    /*align-content: center; You use it to diplay content vertically on flex wrap*/
    /*align-items: center;
    align-content: flex-end;
    align-content: space-between;*/
}
.flexbox{
    width: 200px;
    margin: 10px;
    border: 3px solid black;
    background-color: lightslategray ;
}
.flexboc-item1{
    min-height: 100px;
    /*flex-shrink: 0; this item won shrnk or responce to the display size.*/
    /*flex-grow: 1; this will take the free space of the container.*/
    /*flex-basis: 0px; so it will take this point to grow the since for the free space applyed*/
    flex: 1 0 0px; /*this is a shurtcut to put the grow shrink and basis */
}
.flexboc-item2{
    min-height: 200px;
    flex: 1 0 0px;
}
.flexboc-item3{
    min-height: 300px;
    flex: 1 0 0px;
}

/*GRID*/

.grid-item{
    background-color: mediumaquamarine;
    border: solid 1px darkslategray;
    min-height: 100px;
    color: black;
    font-size: 2vw;
    text-align-last: justify;
}

.grid-container{
    background-color: rgb(93, 93, 93);
    margin: 0px;
    min-height: 700px;
    display: grid;
    grid-template-columns: repeat(2, 250px);
    /*grid-template-rows: repeat(5 ,1fr); used for setting the number of rows.*/
    grid-auto-rows: minmax(150px ,150px); /*you will able to set a new min and max height for each row yoou put 
                you can put auto  ^ here to align it.  */
    /*grid-row-gap: 20px;
    grid-column-gap: 10px;  setting the gap indivicualy. */
    grid-gap: 20px;
    /*grid-template-areas: 
    "header header"
    "sider1 sider2" this is the way of how you can distribute the grid container
    "sider4 sider2"
    "sider5 sider5" 
    in each item you put ex: grid-area: sider5;
    ; */
    justify-content: space-around;
    align-content: space-around;
}
    /*grid-column: span 2;
    grid-row: span 2; this is used to span the set of out grid and add the space we want for each item */

/*POSITIONS*/

.containerposition{
    /*position: static; is the default*/
    background-color: rgb(141, 232, 255);
    min-height: 500px;
    position: relative;
}
.child1{
    width: 90%;
    margin-left: 5%;
    min-height: 90px;
    background-color: brown;
    position: absolute; /*Completele removes it from the file and you are able to modify it 
    with from de very top of the container parent.*/
    top: 0; /*noice taht even with a top 0 the absolute element do not get to the top of the page 
    as fixed positioning, but instead gets to the top of the parent container. */
}
.child2{
    width: 20%;
    margin-left: 5%;
    min-height: 90px;
    background-color: yellowgreen;
    position: relative; /*acts exactly the same as static but you can change the top,
    button,left nad right setting by pixels*/
    right: 15px;
}
.child3{
    width: 90%;
    min-height: 90px;
    background-color: blueviolet;
    position: static;
    /*position: fixed; will put hte element at the top of the page if it has a  top: 0px;*/
}
 /*STICKY POSITION */

 .list-sticky{
    margin-left: 25%;
    width: 50%;
    background-color: rgb(225, 194, 255);
 }
 .titlea,.titleb,.titlec,.titled{
     background-color: rgb(49, 18, 78);
     color: white;
     text-align: center;
     position: sticky;
     top: 0;
 }
 
 /* Z INDEX */

.zindez-container{
    margin: auto;  /*margin auto center to the middel*/
    width: 50%;
    background-color: coral;
    min-height: 200px;
}

 .z-item {
 min-height: 200px;
 max-width: 200px;
 border: solid 3px black;
 position: relative;
 border-radius:100% ;
 }
 .z-one{
    background-color: darkolivegreen;
    left: 200px;
    z-index: 1; /*with the z-index i am able to specify the order of which the element are 
    beign display and which onegoes upon the other.*/
 }
 .z-two{
    background-color:rgb(177, 34, 34);
    left: 300px;
    top: -100px;
    z-index: 3;
 }
 .z-three{
    background-color: rgb(21, 10, 58);    
    left: 400px; 
    top: -200px;
    z-index: 2;
}

/*PSEUDO CLASS*/

/*hover*/
.containerhover{
    text-align: center;
    font-size: 4vw;
}
.ifthishover div {
    display: none;
}
.containerhover .ifthishover:hover  div { /*width this pesudo class we are calling all teh div 
    inside that are child of the hover class to o certain thing.*/
    display: block;
    background-color: sandybrown;
    color: black;
}

/*first-child*/

.first-child-container{
    text-align: center;
    font-size: 2vw ;
}
.first-child-container p:first-child{
    color: red;
}


/*first-child element selection*/
.allelement{
    text-align: center;
 font-size: 3vw ;
}
.allelement p:first-child i { /*whit this i am selecting all elements i inside 
    a p which is the first-child of something.*/
    color: blue;
}


/*Quoting*/
.lang{
    text-align: center;
    font-size: 3vw ;
}
.lang q:lang(su) {
    quotes: " incredible " " of "; /*everithing written here will be not allow to 
    be copy on the browser*/
}

/*PSEAUDO ELEMENTS*/

/*::before ::after*/
.beforeconatiner{
    text-align: center;
}
.beforeconatiner h3::before{
    content: 'Hello';
    display: block;
    text-align: center;                     /*asidenote: you cannot use ::before ::after on an image*/
    color: black;
    background: brown;
}
.beforeconatiner h3::after{
    content: 'Goodbye';
    display: block;
    text-align: center;
    color: black;
    background: brown;
}

/*opacity of an elemen */
.opacity {
    position: relative;
    width: 90%;
    margin-left: 5%;
    min-height: 300px;
    background: rgb(21, 10, 58);
}
.opacitybacktext{
    font-size: 1.5vw;
    width: 60%;
    text-align: center;
    background: crimson;
    padding: 50px;
    position: absolute;
    opacity: 0.6;
}
.opacitybacktext p {
    color: white;
}





/*SIDEBAR EXERCISE*/

.exer{
    text-align: center;
}

.tabs-container{
    margin: auto;
    max-width: 30%;
    min-height: 500px;
    background-color: rgb(131, 75, 172);
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    text-align: center;
}
.item, .itemwork {
    color: white;
    font-size: 20px;
    background: none;
    cursor: pointer;
    display: flex;
    justify-content: space-around;
    align-items: center;
}
.button{
    text-align: right;
    color: white;
    font-size: 20px;
    background: none;
    cursor: pointer;
    display: flex;
    justify-content: space-around;
    align-items: center;
}
.item:hover, .itemwork:hover {
    background: rgb(166, 110, 206);
    box-shadow: 5px 5px 6px rgb(63, 63, 63);
    z-index: 2;
    transition-duration: 0.4s;
}
.itemwork ul{
    display: none;
    font-size: 19px;
}
.itemwork:hover ul{
    font-size: 20px;
    color: rgb(255, 255, 255);
    background: rgb(166, 110, 206);
    box-shadow: 5px 5px 6px rgb(63, 63, 63);
    border-radius: 0px 5px 5px 0px;
    left: 30%;
    padding: 10px;
    display:block;
    position: absolute;
    transition-duration: 0.3s;
    z-index: 1;
}
.itemwork:hover{
    box-shadow: 5px 5px 6px rgb(63, 63, 63);
}
/*FORMS FOCUS PROPERTY*/

.formfocus{
background-color: blueviolet;
max-width: 20%;
margin: auto;
display: grid;
margin-top: 20px;
min-height: 200px;
}
.formfocus label{
    color: white;
}
.formfocus input{
    max-width: 80%;
}
.formfocus input:focus{ /*WHen you click on it it will take the properties as below*/
    max-width: 100%;  
    transition-duration: 0.4s;
}

/*COUNTERS*/

body {
    counter-reset: programmincounter; /*here i am setting the counter with a specific name*/
}
.counters{
    text-align: center;
}
.counters h1::before{
    counter-increment: programmincounter;/*Here I call the caunter to take action and execute the
    content below.*/
    content: "Section "counter(programmincounter)": ";
}

/*MATH FUNCTIONS*/

.math .calc{
 background-color: red;
 width: calc(100% - 100px);
}
.math .min{
 background-color: blue;
 width: min(100px , 50%);
}
.math .max{
 background-color: blueviolet;
 width: max(50px, 100%);
}


/*GRADIANTS*/

.gradient{
 margin: 20px;
}
.gradient-item{
    margin: 10px;
    max-width: 200px;
    min-height: 200px;
    color: white;
    font-size: 2rem;
}
.normal-gra{
    background-image: linear-gradient(red, black);
}
.to-right{
    background-image: linear-gradient(to right, red, black);
}
.degrees{
    background-image: linear-gradient(120deg, red, black);
}
.normal-rad{
    background-image: radial-gradient(red , black);
}

/*TRANSFORMATIONS*/

.transformations {
    display: flex;
}

.transformations div {
    max-width: 200px;
    min-height: 200px;
    background-color: red;
    padding: 10px;
    margin: 5px;
    transition-duration: 0.4s;
}
.rotatex:hover{
    transform: rotateX(180deg);
    transition-duration: 0.4s;
}
.rotatez:hover{
    transform: translate3d(12px,12px,10px);
    transform: perspective(20);
    transition-duration: 0.4s;
    box-shadow: 0px 0px 15px 0px;
}
.rotatey:hover{
    transform: rotateY(180deg);
    transition-duration: 0.4s;
}
